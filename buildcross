#!/bin/sh
#
# buildcross - a tool for building GCC cross toolchains
# Copyright (C) 2019-2021  Mikael Pettersson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Usage: buildcross [-jN] <TARGET> [<CROSS_DIR>]
#
# Supported targets and resulting toolchains:
#
# a29k		a29k-unknown-coff (no libc)
# aarch64	aarch64-unknown-linux-gnu
# alpha		alpha-unknown-linux-gnu
# arc		arc-unknown-linux-gnu
# armv7l	armv7l-unknown-linux-gnueabi
# avr		avr-unknown-elf (no libc)
# bfin		bfin-unknown-linux-uclibc
# bpf		bpf-unknown-none (no libc)
# c6x		c6x-unknown-uclinux
# cr16		cr16-unknown-elf
# cris		crisv32-unknown-linux-uclibc
# crx		crx-unknown-elf (no libc)
# csky		csky-unknown-linux-gnu (only little-endian)
# d30v		d30v-unknown-elf (no libc)
# epiphany	epiphany-unknown-elf
# fr30		fr30-unknown-elf
# frv		frv-unknown-linux-uclibc
# ft32		ft32-unknown-elf
# h8300		h8300-unknown-linux-uclibc
# hppa		hppa-unknown-linux-gnu (no -m64 support)
# i860		i860-stardent-sysv4 (no libc)
# i960		i960-unknown-coff (no libc)
# ia64		ia64-unknown-linux-gnu
# ip2k		ip2k-unknown-elf (no libc)
# iq2000	iq2000-unknown-elf
# kvx		kvx-unknown-elf
# lm32		lm32-uclinux-uclibc
# loongarch64	loongarch64-unknown-linux-gnu
# m32c		m32c-unknown-elf
# m32r		m32r-unknown-elf
# m68hc11	m68hc11-unknown-elf
# m68k		m68k-unknown-linux-gnu
# m88k		m88k-unknown-openbsd (elf, no libc)
# mcore		mcore-unknown-elf
# mep		mep-unknown-elf (no libc)
# microblaze	microblaze-unknown-linux-gnu
# mingw64	x86_64-w64-mingw32 with -m64 and -m32 support
# mips64	mips64-unknown-linux-gnu with -mabi=64, -mabi=n32, and -mabi=32 support
# mmix		mmix-knuth-mmixware (with newlib)
# mn10300	mn10300-unknown-elf
# moxie		moxie-unknown-elf
# msp430	msp430-unknown-elf
# mt		mt-unknown-elf
# nds32		nds32le-unknown-linux-gnu
# nios2		nios2-unknown-linux-gnu
# ns32k		ns32k-unknown-netbsd (no libc)
# or1k		or1k-unknown-linux-musl
# pdp11		pdp11-unknown-aout (no libc)
# ppc64		ppc64-unknown-linux-gnu with -m64 and -m32 support
# ppc64le	ppc64le-unknown-linux-gnu (no -m32 support)
# pru		pru-unknown-elf
# rl78		rl78-unknown-elf
# riscv64	riscv64-unknown-linux-gnu (no 32-bit support)
# rx		rx-unknown-elf
# s390x		s390x-unknown-linux-gnu with -m64 and -m31 support
# score		score-unknown-elf (no libc)
# sh4		sh4-unknown-linux-gnu
# sparc64	sparc64-unknown-linux-gnu with -m64 and -m32 support
# tilegx	tilegx-unknown-linux-gnu
# tms9900	tms9900-unknown-elf (no libc)
# ubicom32	ubicom32-linux-uclibc
# v850		v850e-uclinux-uclibc
# vax		vax-unknown-linux (no libc or kernel headers)
# visium	visium-unknown-elf
# x86_64	x86_64-unknown-linux-gnu with -m64, -mx32, and -m32 support
# xstormy16	xstormy16-unknown-elf
# xtensa	xtensa-unknown-linux-uclibc
#
# Pending:
#
# aarch64	waiting for glibc -mabi=ilp32 support
# loongarch64	waiting for -m32 support (binutils breakage)
#
# Unsupported:
#
# - targets not supported by upstream toolchain components
# - targets requiring add-on patches
#   (for now, may change time permitting)
# - Linux targets using another libc than glibc, uclibc-ng, or musl
#   (for now, may change time permitting)
# - non-Linux targets except mingw-w64 and plain ELF with newlib
#
# Specific unsupported targets:
#
# 1750a/m1750	see https://github.com/mikpe/m1750-tools for sources and instructions for building
#		an m1750-coff toolchain (the alternative 1750a target required a non-standard
#		assembler/linker and was removed in gcc-3.3, it's not supported)
# amdgcn	not in binutils, though apparently in llvm's assembler and linker
# avr32		not in any upstream toolchain components except uClibc-ng, removed in linux-4.12
# clipper	not in binutils, removed in gcc-3.3
# convex	not in binutils, removed in gcc-3.3
# d10v		see https://github.com/mikpe/ecosSWtools for sources and instructions for building
#		a d10v-elf toolchain
# dsp16xx	not in binutils, removed in gcc-4.0
# elxsi		not in binutils, removed in gcc-3.3
# fx80		not in binutils, removed in gcc-3.0
# gmicro	not in binutils, removed in gcc-3.0
# hexagon	not in any upstream toolchain components, removed in linux-4.17 (TODO: check llvm)
# m6809		https://gitlab.com/dfffffff has ports of gcc and newlib, but the assembler and linker
#		are custom, there is no disassembler, and the build procedures are non-standard
# metag		not in upstream GCC, removed in linux-4.17
# picochip	not in binutils, removed in gcc-5
# pj		binutils rejects gcc's output and command-line options, did vanilla sources ever work?
# nvptx		not in binutils, requires the nvptx-tools package
# pyr		not in binutils, removed in gcc-3.0
# romp		not in binutils, removed in gcc-3.4
# spur		not in binutils, removed in gcc-3.0
# tahoe		incomplete in binutils (no ld), removed in binutils-2.17 (gas) and 2.31 (rest) and gcc-3.0
# unicore32	not in any upstream toolchain components, removed in linux-5.9
# we32k		incomplete in binutils (no gas or ld), removed in binutils-2.31 and gcc-3.3
# z8k		see https://github.com/mikpe/ecosSWtools for sources and instructions for building
#		a z8k-coff toolchain
# zpu		the toolchain in https://github.com/zylin/zpugcc doesn't build

set -e

VERSION="6.7.8"

case "$1" in
    -j*)
	DASHJ="$1"
	shift
	;;
    *)
	DASHJ=
esac

TARGET_ARCH="$1"
if [ -z "${TARGET_ARCH}" ]; then
    echo no target arch provided
    exit 1
fi

BUILD_DIR=`realpath .`
DOWNLOADS_DIR=`realpath ./downloads`
HOST_TOOLS_DIR=`realpath ./host-tools`
SOURCES_DIR=`realpath ./sources`

CROSS_DIR=${2:-"${BUILD_DIR}/cross-${TARGET_ARCH}"}

# default component versions
BINUTILS_VSN=2.37
GCC_VSN=11.2.0
GLIBC_VSN=2.34
GMP_VSN=6.2.1
LINUX_VSN=5.15
MINGW64_VSN=9.0.0
MPC_VSN=1.2.1
MPFR_VSN=4.1.0
MUSL_VSN=1.2.2
NEWLIB_VSN=4.2.0.20211231
UCLIBC_VSN=1.0.39

# binutils configuration options
BINUTILS_WANTS_DISABLE_WERROR=
BINUTILS_WANTS_ENABLE_OBSOLETE=

# gcc configuration options
GCC_WANTS_ENABLE_OBSOLETE=
GCC_WANTS_ENABLE_INITFINI_ARRAY=

# glibc configuration options
GLIBC_WANTS_DISABLE_WERROR=

# uClibc-ng configuration options
UCLIBC_WANTS_LINUXTHREADS=
UCLIBC_WANTS_NPTL=
UCLIBC_WANTS_SSP=
UCLIBC_WANTS_LITTLE_ENDIAN=
UCLIBC_WANTS_BIG_ENDIAN=

# target-specfic overrides
case "${TARGET_ARCH}" in
    "a29k")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-coff"
	GCC_VSN=2.95.3
	BINUTILS_VSN=2.16.1
	NEWLIB_VSN= # fails to build for a29k
	# you need to:
	# - adjust PATH to select gcc-3.x (3.4.6 and 3.3.6 are known to work)
	# - set BUILD_TRIPLE because gcc-3.x -v doesn't list Target:
	# - if on x86_64, set CC to a wrapper script that enforces -m32
	# - if on x86_64, set BUILD_TRIPLE=i686-pc-linux-gnu
	SKIP_HOST_TOOLS=1
	;;
    "armv7l")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-linux-gnueabi"
	;;
    "avr")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	NEWLIB_VSN= # not supported in newlib at all
	;;
    "bfin")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-linux-uclibc"
	UCLIBC_WANTS_LINUXTHREADS=y
	UCLIBC_WANTS_SSP=y
	UCLIBC_VSN=1.0.38 # 1.0.39 fails to build with linkage errors
	LINUX_VSN=4.16 # blackfin was removed in linux-4.17
	GCC_VSN=9.4.0 # gcc-10.x/11.x give linkage errors in uClibc-ng
	;;
    "bpf")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-none"
	NEWLIB_VSN= # not supported in newlib at all
	;;
    "c6x")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-uclinux"
	UCLIBC_WANTS_LINUXTHREADS=y
	UCLIBC_WANTS_SSP=y
	UCLIBC_WANTS_BIG_ENDIAN=y
	UCLIBC_VSN=1.0.38 # 1.0.39 fails to build with linkage errors
	LINUX_VSN=5.11 # c6x was removed in linux-5.12
	;;
    "cr16")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "cris")
	TARGET_TRIPLE="crisv32-unknown-linux-uclibc"
	UCLIBC_WANTS_LINUXTHREADS=y
	UCLIBC_WANTS_SSP=y
	UCLIBC_VSN=1.0.38 # 1.0.39 fails to build with linkage errors
	LINUX_VSN=4.16 # cris was removed in linux-4.17
	GCC_WANTS_ENABLE_OBSOLETE=1 # gcc-10 marks cris as obsolete
	GCC_VSN=10.3.0 # gcc-11.1.0 dropped support for this target triple
	;;
    "crx")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	GCC_VSN=4.5.4 # 4.6 ICEs, removed in 4.7
	NEWLIB_VSN= # gcc ICEs building newlib
	SKIP_HOST_TOOLS=1
	;;
    "d30v")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	GCC_VSN=3.4.6
	GCC_WANTS_ENABLE_OBSOLETE=1
	BINUTILS_VSN=2.16.1
	NEWLIB_VSN= # fails to build for d30v
	# you need to:
	# - adjust PATH to select gcc-3.x (3.3.6 and 3.4.6 are known to work)
	# - set BUILD_TRIPLE because gcc-3.x -v doesn't list Target:
	SKIP_HOST_TOOLS=1
	;;
    "epiphany")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "fr30")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "frv")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-linux-uclibc"
	UCLIBC_WANTS_SSP=y
	UCLIBC_VSN=1.0.38 # 1.0.39 fails to build with linkage errors
	LINUX_VSN=4.16 # frv was removed in linux-4.17
	;;
    "ft32")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "h8300")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-linux-uclibc"
	# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101697
	GCC_VSN=10.3.0 # gcc-11/12 ICE building uClibc-ng
	;;
    "i860")
	TARGET_TRIPLE="${TARGET_ARCH}-stardent-sysv4"
	GCC_VSN=3.2.3
	GCC_WANTS_ENABLE_OBSOLETE=1
	BINUTILS_VSN=2.16.1
	NEWLIB_VSN= # doesn't support i860
	SKIP_HOST_TOOLS=1
	# you need to:
	# - adjust PATH to select gcc-3.x (3.3.6 and 3.4.6 are known to work)
	# - set BUILD_TRIPLE because gcc-3.x -v doesn't list Target:
	# - if on x86_64, set CC to a wrapper script that enforces -m32
	;;
    "i960")
	# There is a port based on uclinux-2.0.x and uclibc-0.9.27,
	# but it's buried in pre-2013 releases of uClinux-dist on
	# SourceForge, and it requires major patching to build.
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-coff"
	GCC_VSN=3.4.6
	GCC_WANTS_ENABLE_OBSOLETE=1
	BINUTILS_VSN=2.16.1
	NEWLIB_VSN= # fails to build for i960
	# you need to:
	# - adjust PATH to select gcc-3.x (3.3.6 and 3.4.6 are known to work)
	# - set BUILD_TRIPLE because gcc-3.x -v doesn't list Target:
	# - if on x86_64, set CC to a wrapper script that enforces -m32
	SKIP_HOST_TOOLS=1
	;;
    "ip2k")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	GCC_VSN=3.3.6 # added in 3.3, ICEs in 3.4 and 4.0, removed in 4.1
	NEWLIB_VSN= # doesn't support ip2k
	# you need to:
	# - adjust PATH to select gcc-3.x (3.3.6 and 3.4.6 are known to work)
	# - set BUILD_TRIPLE because gcc-3.x -v doesn't list Target:
	SKIP_HOST_TOOLS=1
	;;
    "iq2000")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "kvx")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	# from https://github.com/kalray/build-scripts.git
	BINUTILS_VSN="git;https://github.com/kalray/gdb-binutils.git;-;-;6165fd8a8b42fdf1968db08bbc11e8319cabc61c;kalray"
	GCC_VSN="git;https://github.com/kalray/gcc.git;-;coolidge;32ce4ec583aa5e3498cf9ccf3c06a8b6ca290cf5;kalray"
	NEWLIB_VSN="git;https://github.com/kalray/newlib.git;-;coolidge;84b71a545d86f28289ec805e6e25e896683bac4e;kalray"
	# kvx-gcc is based on gcc-7.5.0, so use that to build it
	HOST_GCC_VSN=7.5.0
	# there is a linux and uClibc-ng port, but uClibc-ng fails to build with relocation errors
	;;
    "lm32")
	TARGET_TRIPLE="${TARGET_ARCH}-uclinux-uclibc"
	LINUX_VSN="git;https://github.com/m-labs/linux-milkymist.git;-;master;1f446f97a4362092dab13d996193a9dc7b0be8e9"
	;;
    "loongarch64")
	BINUTILS_VSN="git;https://github.com/loongson/binutils-gdb.git;-;loongarch-2_37;HEAD;loongson"
	GCC_VSN="git;https://github.com/loongson/gcc.git;-;loongarch_upstream;HEAD;loongson"
	GLIBC_VSN="git;https://github.com/loongson/glibc.git;-;loongarch_2_34_for_upstream;HEAD;loongson"
	LINUX_VSN="git;https://github.com/loongson/linux.git;-;loongarch-next;HEAD;loongson"
	HOST_GCC_VSN=11.2.0
	;;
    "m32c")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	GCC_VSN=4.7.4 # later ones fail in various ways
	SKIP_HOST_TOOLS=1
	;;
    "m32r")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "m68hc11")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	BINUTILS_VSN=2.26.1 # later version cannot assemble m68hc11-gcc's libgcc .asm files
	GCC_VSN=4.2.4 # later versions ICE, removed in 4.7
	NEWLIB_VSN=2.2.0-1 # later versions cannot be built by the 4.2-based m68hc11-gcc
	# PATH must select an older gcc suitable for building the above (4.2 is known to work)
	SKIP_HOST_TOOLS=1
	;;
    "m88k")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-openbsd"
	# binutils and gcc from OpenBSD for m88k
	BINUTILS_VSN="git;https://github.com/mikpe/binutils-gdb.git;-;binutils-2_15-m88k-openbsd;HEAD;mikpe"
	GCC_VSN="git;https://github.com/mikpe/gcc.git;-;gcc-3.3.6-m88k-openbsd;HEAD;mikpe"
	NEWLIB_VSN= # fails to build for m88k
	# you need to:
	# - adjust PATH to select a gcc capable of building the above, 3.3.6 to 5.5.0 are known to work
	# - if PATH selects gcc < 4.0, set BUILD_TRIPLE because gcc -v < 4.0 doesn't list Target:
	SKIP_HOST_TOOLS=1
	;;
    "mcore")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "mep")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	GCC_VSN=4.5.4 # later ones are broken, removed in gcc-7
	NEWLIB_VSN= # fails to build for mep
	SKIP_HOST_TOOLS=1
	;;
    "mingw64")
	TARGET_TRIPLE="x86_64-w64-mingw32"
	;;
    "mmix")
	TARGET_TRIPLE="${TARGET_ARCH}-knuth-mmixware"
	;;
    "mn10300")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "moxie")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "msp430")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "mt")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	# binutils must be built in 32-bit mode to avoid a 32/64 bit
	# extension bug, some version after 2.20.1 fixed that bug, but
	# versions after 2.20.1 also fail to assemble parts of newlib
	BINUTILS_VSN=2.20.1
	# gcc must be built in 32-bit mode to avoid a 32/64 bit extension
	# bug, 4.3.6 could also be built (same bug though), but we stay
	# with 4.2.4 to avoid dependencies on 32-bit gmp and mpfr
	GCC_VSN=4.2.4
	# 2.2.0-1 is the latest newlib to be buildable by mt-elf gcc
	NEWLIB_VSN=2.2.0-1
	# on x86_64 you must set CC to a wrapper script that enforces -m32
	# PATH must select a older gcc suitable for building gcc-4.2.4 and
	# binutils-2.20.1 (gcc-4.1 and 4.2 are known to work)
	SKIP_HOST_TOOLS=1
	;;
    "nds32")
	TARGET_TRIPLE="nds32le-unknown-linux-gnu"
	GLIBC_VSN="git;https://github.com/andestech/glibc.git;-;nds32-glibc-2.27-v0;HEAD;andestech"
	GLIBC_WANTS_DISABLE_WERROR=1
	;;
    "ns32k")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-netbsd"
	GCC_VSN=4.0.4
	GCC_WANTS_ENABLE_OBSOLETE=1 # obsoleted in 4.0, removed in 4.1
	SKIP_HOST_TOOLS=1 # PATH must point to a suitable old gcc
	# we can't build libc, but netbsd-1.5.3's can be popped in
	;;
    "or1k")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-linux-musl"
	;;
    "pdp11")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-aout"
	NEWLIB_VSN= # not supported in newlib at all
	;;
    "pru")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "rl78")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "rx")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "score")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	GCC_VSN=4.9.4 # removed in gcc-5.0
	GCC_WANTS_ENABLE_OBSOLETE=1
	NEWLIB_VSN= # doesn't support score
	SKIP_HOST_TOOLS=1 # PATH must point to a suitable old gcc
	;;
    "tilegx")
	BINUTILS_VSN=2.28.1 # later versions cannot build glibc
	GCC_VSN=7.5.0 # later versions cannot build glibc
	GLIBC_VSN=2.25 # later versions do not build
	LINUX_VSN=4.16 # tile was removed in linux-4.17
	;;
    "tms9900")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	BINUTILS_VSN="git;https://github.com/mikpe/binutils-gdb.git;-;binutils-2_19_1-tms9900;HEAD;mikpe"
	BINUTILS_WANTS_DISABLE_WERROR=1
	GCC_VSN="git;https://github.com/mikpe/gcc.git;-;gcc-4.4.0-tms9900;HEAD;mikpe"
	NEWLIB_VSN= # newlib doesn't support tms9900, but insomnia and tursi have published custom ti99 libcs
	SKIP_HOST_TOOLS=1 # PATH must point to gcc-9 or older
	# TODO: extend sim990 to run tms9900 ELF executables
	;;
    "ubicom32")
	TARGET_TRIPLE="${TARGET_ARCH}-linux-uclibc"
	BINUTILS_VSN="git;https://source.codeaurora.org/external/ubicom/ubicom32-toolchain;src;IP8K;236bff6653554ce3360dd94cc5291f54c8a550d0"
	BINUTILS_WANTS_DISABLE_WERROR=1
	GCC_VSN="git;https://source.codeaurora.org/external/ubicom/ubicom32-toolchain;src/gcc;IP8K;236bff6653554ce3360dd94cc5291f54c8a550d0"
	LINUX_VSN="git;https://source.codeaurora.org/external/ubicom/ubicom32-android;-;-;f67b0c971d4aee1825c6288c65f213c298db6062"
	UCLIBC_VSN="git;https://source.codeaurora.org/external/ubicom/ubicom32-uclibc;-;-;e043cec698ee5fa4057eb68b50c3e1f993586a46"
	SKIP_HOST_TOOLS=1 # ubicom32-gcc is based on gcc-4.4.1, you'll need something compatible in PATH
	;;
    "v850")
	TARGET_TRIPLE="${TARGET_ARCH}e-uclinux-uclibc"
	# binutils-2.37 with backport of PR 28292 fix
	BINUTILS_VSN="git;https://github.com/mikpe/binutils-gdb.git;-;binutils-2_37-v850;HEAD;mikpe"
	LINUX_VSN=2.6.26 # v850 was removed in linux-2.6.27
	# v850 was removed in uClibc-ng-1.0.11, this is an unofficial forward-port from 1.0.10
	UCLIBC_VSN="git;https://github.com/mikpe/uclibc-ng.git;-;v1.0.39-v850;HEAD;mikpe"
	;;
    "vax")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-linux"
	NEWLIB_VSN= # not in any supported libc
	;;
    "visium")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "xstormy16")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-elf"
	;;
    "xtensa")
	TARGET_TRIPLE="${TARGET_ARCH}-unknown-linux-uclibc"
	UCLIBC_WANTS_NPTL=y
	UCLIBC_WANTS_SSP=y
	UCLIBC_VSN=1.0.38 # 1.0.39 fails to build with linkage errors
	;;
esac

if [ -z "${TARGET_TRIPLE}" ]; then
    TARGET_TRIPLE="${TARGET_ARCH}-unknown-linux-gnu"
fi

# Host GCC version is normally the same as the cross GCC version,
# except when building the cross GCC from non-upstream git.
if [ -z "${HOST_GCC_VSN}" -a -z "${SKIP_HOST_TOOLS}" ]; then
    HOST_GCC_VSN="${GCC_VSN}"
fi

# disable the components we don't want
case "${TARGET_TRIPLE}" in
    *linux-gnu*)
	UCLIBC_VSN=
	MUSL_VSN=
	MINGW64_VSN=
	NEWLIB_VSN=
	# c.f. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100896
	GCC_WANTS_ENABLE_INITFINI_ARRAY=1
	;;
    *linux-uclibc* | *uclinux*)
	GLIBC_VSN=
	MUSL_VSN=
	MINGW64_VSN=
	NEWLIB_VSN=
	;;
    *linux-musl*)
	GLIBC_VSN=
	UCLIBC_VSN=
	LINUX_VSN=
	MINGW64_VSN=
	NEWLIB_VSN=
	;;
    x86_64-w64-mingw32)
	GLIBC_VSN=
	UCLIBC_VSN=
	MUSL_VSN=
	LINUX_VSN=
	NEWLIB_VSN=
	;;
    *-elf | \
    a29k-unknown-coff | \
    bpf-unknown-none | \
    i860-stardent-sysv4 | \
    i960-unknown-coff | \
    m88k-unknown-coff | \
    ns32k-unknown-netbsd | \
    mmix-knuth-mmixware | \
    m88k-unknown-openbsd | \
    pdp11-unknown-aout | \
    vax-unknown-linux)
	GLIBC_VSN=
	UCLIBC_VSN=
	MUSL_VSN=
	MINGW64_VSN=
	LINUX_VSN=
	;;
esac

log() {
    echo
    echo "@ $1"
    echo
}

DISTFILES="https://mirrors.kernel.org/gentoo/distfiles"

get_tarball() {
    local EXT=${2:-"xz"}
    local URL=${3:-"${DISTFILES}"}
    local ALT_URL="$4"
    if [ ! \( -f "$1.tar.xz" -o -f "$1.tar.bz2" -o -f "$1.tar.gz" \) ]; then
	wget "${URL}/$1.tar.${EXT}" || :
	if [ ! -f "$1.tar.${EXT}" ]; then
	    if [ -n "${ALT_URL}" ]; then
		wget "${ALT_URL}/$1.tar.${EXT}"
	    else
		exit 1
	    fi
	fi
    fi
}

# Gentoo's distfiles doesn't contain all kernel versions,
# so as fallback try to get them directly from upstream.
get_linux_tarball() {
    local LINUX_VSN="$1"
    local KERNEL_DIR=
    case "${LINUX_VSN}" in
	5\.*)
	    KERNEL_DIR=v5.x
	    ;;
	4\.*)
	    KERNEL_DIR=v4.x
	    ;;
	2\.6\.*)
	    KERNEL_DIR=v2.6
	    ;;
    esac
    get_tarball "linux-${LINUX_VSN}" "xz" "${DISTFILES}" "https://www.kernel.org/pub/linux/kernel/${KERNEL_DIR}"
}

get_git() {
    local REPO="$1"
    # $2 is SUBDIR which is unused here
    local BRANCH="$3"
    local REF="$4"
    local VENDOR="$5"
    local DIR
    if [ "${BRANCH}" = "-" ]; then
	BRANCH=""
    fi
    if [ -n "${BRANCH}" ]; then
	BRANCH="-b ${BRANCH}"
    fi
    if [ "${VENDOR}" = "-" ]; then
	VENDOR=""
    fi
    if [ -n "${VENDOR}" ]; then
	VENDOR="${VENDOR}-"
    fi
    DIR="${VENDOR}`basename ${REPO}`"
    if [ -d "${DIR}" ]; then
	cd "${DIR}"
	git fetch
	cd -
    else
	git clone ${BRANCH} "${REPO}" "${DIR}"
    fi
    cd "${DIR}"
    git reset --hard "${REF}"
    cd -
}

get_source() {
    local PREFIX="$1"
    local VSN="$2"
    local EXT="$3"
    local URL="$4"
    local ALTURL="$5"
    case "${VSN}" in
	git\;*)
	    # git;REPO;SUBDIR;BRANCH;REF;VENDOR
	    set `echo "${VSN}" | tr ';' ' '`
	    shift
	    get_git "$1" "$2" "$3" "$4" "$5"
	    ;;
	*)
	    case "${PREFIX}" in
		"linux-")
		    get_linux_tarball "${VSN}"
		    ;;
		*)
		    get_tarball "${PREFIX}${VSN}" "${EXT}" "${URL}" "${ALTURL}"
	    esac
	    ;;
    esac
}

get_sources() {
    log "getting sources"
    cd "${DOWNLOADS_DIR}"
    get_source "binutils-" "${BINUTILS_VSN}"
    get_source "gcc-" "${GCC_VSN}"
    [ -n "${HOST_GCC_VSN}" ] && get_tarball "gcc-${HOST_GCC_VSN}"
    [ -n "${GLIBC_VSN}" ] && get_source "glibc-" "${GLIBC_VSN}"
    [ -n "${UCLIBC_VSN}" ] && get_source "uClibc-ng-" "${UCLIBC_VSN}" "xz" "https://downloads.uclibc-ng.org/releases/${UCLIBC_VSN}"
    [ -n "${MUSL_VSN}" ] && get_tarball "musl-${MUSL_VSN}" "gz"
    [ -n "${MINGW64_VSN}" ] && get_tarball "mingw-w64-v${MINGW64_VSN}" "bz2"
    [ -n "${NEWLIB_VSN}" ] && get_source "newlib-" "${NEWLIB_VSN}" "gz"
    get_tarball "gmp-${GMP_VSN}"
    [ -n "${LINUX_VSN}" ] && get_source "linux-" "${LINUX_VSN}"
    get_tarball "mpfr-${MPFR_VSN}"
    get_tarball "mpc-${MPC_VSN}" "gz"
    cd -
}

unpack_tarball() {
    if [ ! -d "${SOURCES_DIR}/$1" ]; then
	if [ -f "${DOWNLOADS_DIR}/$1.tar.xz" ]; then
	    tar -C "${SOURCES_DIR}" -xf "${DOWNLOADS_DIR}/$1.tar.xz"
	elif [ -f "${DOWNLOADS_DIR}/$1.tar.bz2" ]; then
	    tar -C "${SOURCES_DIR}" -xf "${DOWNLOADS_DIR}/$1.tar.bz2"
	else
	    tar -C "${SOURCES_DIR}" -xf "${DOWNLOADS_DIR}/$1.tar.gz"
	fi
    fi
}

unpack_source() {
    local PREFIX="$1"
    local VSN="$2"
    local REPO
    local SUBDIR
    local VENDOR
    case "${VSN}" in
	git\;*)
	    # git;REPO;SUBDIR;BRANCH;REF;VENDOR
	    set `echo "${VSN}" | tr ';' ' '`
	    shift
	    REPO="$1"
	    SUBDIR="$2"
	    # $3 is BRANCH which is unused here
	    # $4 is REF which is unused here
	    VENDOR="$5"
	    if [ "${SUBDIR}" = "-" ]; then
		SUBDIR=""
	    fi
	    if [ -n "${SUBDIR}" ]; then
		SUBDIR="/${SUBDIR}"
	    fi
	    if [ "${VENDOR}" = "-" ]; then
		VENDOR=""
	    fi
	    if [ -n "${VENDOR}" ]; then
		VENDOR="${VENDOR}-"
	    fi
	    echo "${DOWNLOADS_DIR}/${VENDOR}`basename ${REPO}`${SUBDIR}"
	    ;;
	*)
	    unpack_tarball "${PREFIX}${VSN}"
	    echo "${SOURCES_DIR}/${PREFIX}${VSN}"
	    ;;
    esac
}

build_host_gmp() {
    local SUFFIX="$1"
    if [ -d "${HOST_TOOLS_DIR}/gmp-${GMP_VSN}${SUFFIX}" -o -d "${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}" ]; then
	return
    fi
    log "building host gmp-${GMP_VSN}${SUFFIX}"
    unpack_tarball "gmp-${GMP_VSN}"
    rm -rf objdir-gmp
    mkdir objdir-gmp
    cd objdir-gmp
    unset ABI
    ${SOURCES_DIR}/gmp-${GMP_VSN}/configure \
		--prefix="${HOST_TOOLS_DIR}/gmp-${GMP_VSN}${SUFFIX}" \
		--disable-shared \
		--enable-alloca=alloca \
		ABI=64
    make ${DASHJ}
    make install
    cd ..
    rm -rf objdir-gmp
}

build_host_mpfr() {
    local SUFFIX="$1"
    if [ -d "${HOST_TOOLS_DIR}/mpfr-${MPFR_VSN}${SUFFIX}" -o -d "${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}" ]; then
	return
    fi
    log "building host mpfr-${MPFR_VSN}${SUFFIX}"
    unpack_tarball "mpfr-${MPFR_VSN}"
    rm -rf objdir-mpfr
    mkdir objdir-mpfr
    cd objdir-mpfr
    ${SOURCES_DIR}/mpfr-${MPFR_VSN}/configure \
		--prefix="${HOST_TOOLS_DIR}/mpfr-${MPFR_VSN}${SUFFIX}" \
		--with-gmp="${HOST_TOOLS_DIR}/gmp-${GMP_VSN}${SUFFIX}" \
		--disable-shared
    make ${DASHJ}
    make install
    cd ..
    rm -rf objdir-mpfr
}

build_host_mpc() {
    local SUFFIX="$1"
    if [ -d "${HOST_TOOLS_DIR}/mpc-${MPC_VSN}${SUFFIX}" -o -d "${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}" ]; then
	return
    fi
    log "building host mpc-${MPC_VSN}${SUFFIX}"
    unpack_tarball "mpc-${MPC_VSN}"
    rm -rf objdir-mpc
    mkdir objdir-mpc
    cd objdir-mpc
    ${SOURCES_DIR}/mpc-${MPC_VSN}/configure \
		--prefix="${HOST_TOOLS_DIR}/mpc-${MPC_VSN}${SUFFIX}" \
		--with-gmp="${HOST_TOOLS_DIR}/gmp-${GMP_VSN}${SUFFIX}" \
		--with-mpfr="${HOST_TOOLS_DIR}/mpfr-${MPFR_VSN}${SUFFIX}" \
		--disable-shared
    make ${DASHJ}
    make install
    cd ..
    rm -rf objdir-mpc
}

build_host_gcc() {
    local SUFFIX="$1"
    local MAKE_TARGET
    local DISABLE_BOOTSTRAP
    if [ -d "${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}${SUFFIX}" -o -d "${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}" ]; then
	return
    fi
    log "building host gcc-${HOST_GCC_VSN}${SUFFIX}"
    if [ -z "${SUFFIX}" ]; then
	DISABLE_BOOTSTRAP=
	MAKE_TARGET=bootstrap-lean
    else
	DISABLE_BOOTSTRAP="--disable-bootstrap"
	MAKE_TARGET=
    fi
    unpack_tarball "gcc-${HOST_GCC_VSN}"
    rm -rf objdir-gcc
    mkdir objdir-gcc
    cd objdir-gcc
    ${SOURCES_DIR}/gcc-${HOST_GCC_VSN}/configure \
		--prefix="${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}${SUFFIX}" \
		--with-gmp="${HOST_TOOLS_DIR}/gmp-${GMP_VSN}${SUFFIX}" \
		--with-mpfr="${HOST_TOOLS_DIR}/mpfr-${MPFR_VSN}${SUFFIX}" \
		--with-mpc="${HOST_TOOLS_DIR}/mpc-${MPC_VSN}${SUFFIX}" \
		--without-cloog \
		--without-isl \
		--disable-libgomp \
		--disable-libmpx \
		--disable-libmudflap \
		--disable-libquadmath \
		--disable-libsanitizer \
		--disable-lto \
		--disable-multilib \
		--disable-nls \
		--disable-plugin \
		--disable-shared \
		--enable-checking=release \
		--enable-languages=c,c++ \
		--enable-threads=posix \
		${DISABLE_BOOTSTRAP}
    make ${DASHJ} MAKEINFO=/bin/true ${MAKE_TARGET}
    make install
    cd ..
    rm -rf objdir-gcc
}

build_cross_gcc() {
    local STAGE="$1"
    local LIBC_CONFIGS
    local LIBSSP_CONFIG
    local MULTILIB_CONFIG
    local MAKE_TARGET
    local INSTALL_TARGET
    local ENABLE_CHECKING
    local ENABLE_OBSOLETE
    local ENABLE_INITFINI_ARRAY
    local SOURCE_PATH
    if [ -f "${CROSS_DIR}/.stage-gcc-${STAGE}" ]; then
	return
    fi
    log "building cross-gcc ${GCC_VSN} ${STAGE}"
    SOURCE_PATH=`unpack_source "gcc-" "${GCC_VSN}"`
    LIBC_CONFIGS="--enable-threads=posix"
    LIBSSP_CONFIG="--enable-libssp"
    MULTILIB_CONFIG="--enable-multilib"
    ENABLE_OBSOLETE=
    ENABLE_CHECKING="--enable-checking=release"
    case "${GCC_VSN}" in
	2.* | 3.*)
	    ENABLE_CHECKING= # gcc prior to 4.0 doesn't understand --enable-checking=release
	    ;;
    esac
    ENABLE_OBSOLETE=
    if [ -n "${GCC_WANTS_ENABLE_OBSOLETE}" ]; then
	ENABLE_OBSOLETE="--enable-obsolete"
    fi
    ENABLE_INITFINI_ARRAY=
    if [ -n "${GCC_WANTS_ENABLE_INITFINI_ARRAY}" ]; then
	ENABLE_INITFINI_ARRAY="--enable-initfini-array"
    fi
    case "${TARGET_ARCH}" in
	"aarch64")
	    LIBSSP_CONFIG="--disable-libssp"
	    MULTILIB_CONFIG="--disable-multilib"
	    ;;
	"arc")
	    MULTILIB_CONFIG="--disable-multilib --with-cpu=hs38"
	    ;;
	"armv7l")
	    MULTILIB_CONFIG="--disable-multilib --with-arch=armv7-a --with-tune=cortex-a9 --with-float=hard --with-fpu=vfpv3-d16"
	    ;;
	"csky")
	    MULTILIB_CONFIG="--disable-multilib --with-endian=little"
	    ;;
	"d30v")
	    # fixincludes requires /usr/include/ to exist, even if empty
	    mkdir -p "${CROSS_DIR}/usr/include"
	    ;;
	"frv")
	    LIBSSP_CONFIG="--disable-libssp"
	    ;;
	"i960")
	    # fixincludes requires /usr/include/ to exist, even if empty
	    mkdir -p "${CROSS_DIR}/usr/include"
	    ;;
	"ia64")
	    MULTILIB_CONFIG="--disable-multilib --with-system-libunwind=yes"
	    ;;
	"ip2k")
	    # fixincludes requires /usr/include/ to exist, even if empty
	    mkdir -p "${CROSS_DIR}/usr/include"
	    ;;
	"loongarch64")
	    MULTILIB_CONFIG="--disable-multilib"
	    ;;
	"m88k")
	    ENABLE_CHECKING=
	    mkdir -p "${CROSS_DIR}/usr/include/sys"
	    touch "${CROSS_DIR}/usr/include/sys/mman.h"
	    echo "typedef unsigned long size_t;" > "${CROSS_DIR}/usr/include/sys/types.h"
	    echo "#define FLT_MANT_DIG 24"  > "${CROSS_DIR}/usr/include/float.h"
	    echo "#define DBL_MANT_DIG 53" >> "${CROSS_DIR}/usr/include/float.h"
	    echo "extern void abort(void);" > "${CROSS_DIR}/usr/include/stddef.h"
	    ;;
	"mep")
	    mkdir -p "${CROSS_DIR}/usr/include/sys"
	    touch "${CROSS_DIR}/usr/include/sys/types.h"
	    touch "${CROSS_DIR}/usr/include/stdio.h"
	    touch "${CROSS_DIR}/usr/include/errno.h"
	    touch "${CROSS_DIR}/usr/include/string.h"
	    touch "${CROSS_DIR}/usr/include/stdlib.h"
	    touch "${CROSS_DIR}/usr/include/unistd.h"
	    touch "${CROSS_DIR}/usr/include/time.h"
	    ;;
	"mingw64")
	    MULTILIB_CONFIG="--enable-multilib --enable-64bit --with-dwarf"
	    LIBC_CONFIGS="--enable-threads=win32"
	    ;;
	"nds32")
	    MULTILIB_CONFIG="--disable-multilib --with-arch=v3 --with-cpu=n13"
	    ;;
	"ns32k")
	    # fixincludes requires /usr/include/ to exist, even if empty
	    # libgcc requires /usr/include/machine/ansi.h to exist, even if empty
	    mkdir -p "${CROSS_DIR}/usr/include/machine"
	    touch "${CROSS_DIR}/usr/include/machine/ansi.h"
	    ;;
	"ppc64le")
	    # see https://sourceware.org/bugzilla/show_bug.cgi?id=26360#c4
	    ENABLE_OBSOLETE="--with-long-double-128"
	    LIBSSP_CONFIG="--disable-libssp"
	    ;;
	"riscv64")
	    # see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90419#c1
	    MULTILIB_CONFIG="--enable-multilib --with-multilib-list=lp64d"
	    ;;
	"tilegx")
	    MULTILIB_CONFIG="--disable-multilib"
	    ;;
	"ubicom32")
	    rm -f "${SOURCE_PATH}/libgloss"
	    rm -f "${SOURCE_PATH}/newlib"
	    ;;
	"x86_64")
	    MULTILIB_CONFIG="--enable-multilib --with-multilib-list=m64,m32,mx32"
	    ;;
    esac
    MAKE_TARGET=
    INSTALL_TARGET="install"
    case "${STAGE}" in
	"newlib")
	    LIBC_CONFIGS="--with-newlib --disable-threads"
	    LIBSSP_CONFIG="--disable-libssp"
	    ;;
	"mingw64-minimal")
	    MAKE_TARGET="all-gcc"
	    INSTALL_TARGET="install-gcc"
	    ;;
	"uclibc")
	    if [ -z "${UCLIBC_WANTS_NPTL}" -a -z "${UCLIBC_WANTS_LINUXTHREADS}" ]; then
		LIBC_CONFIGS="--disable-threads"
	    fi
	    if [ -z "${UCLIBC_WANTS_SSP}" ]; then
		LIBSSP_CONFIG="--disable-libssp"
	    fi
	    ;;
    esac
    rm -rf objdir-gcc
    mkdir objdir-gcc
    cd objdir-gcc
    ${SOURCE_PATH}/configure \
		--target="${TARGET_TRIPLE}" ${ENABLE_OBSOLETE} \
		--build="${BUILD_TRIPLE}" \
		--prefix="${CROSS_DIR}" \
		--with-sysroot="${CROSS_DIR}" \
		--with-gmp="${HOST_TOOLS_DIR}/gmp-${GMP_VSN}" \
		--with-mpfr="${HOST_TOOLS_DIR}/mpfr-${MPFR_VSN}" \
		--with-mpc="${HOST_TOOLS_DIR}/mpc-${MPC_VSN}" \
		--without-cloog \
		--without-isl \
		--disable-libatomic \
		--disable-libgomp \
		--disable-libitm \
		--disable-libmpx \
		--disable-libmudflap \
		--disable-libquadmath \
		--disable-libsanitizer \
		--disable-lto \
		--disable-nls \
		--disable-plugin \
		--disable-shared \
	        ${ENABLE_CHECKING} \
		--enable-languages=c \
		${MULTILIB_CONFIG} \
		${LIBC_CONFIGS} ${LIBSSP_CONFIG} ${ENABLE_INITFINI_ARRAY}
    make ${DASHJ} MAKEINFO=/bin/true ${MAKE_TARGET}
    make ${INSTALL_TARGET}
    touch "${CROSS_DIR}/.stage-gcc-${STAGE}"
    cd ..
    rm -rf objdir-gcc
}

build_cross_gcc_without_libc() {
    if [ -n "${MINGW64_VSN}" ]; then
	build_cross_gcc "mingw64-minimal"
    else
	build_cross_gcc "newlib"
    fi
}

build_cross_gcc_with_libc() {
    if [ -n "${GLIBC_VSN}" ]; then
	build_cross_gcc "glibc"
    elif [ -n "${UCLIBC_VSN}" ]; then
	build_cross_gcc "uclibc"
    elif [ -n "${MUSL_VSN}" ]; then
	build_cross_gcc "musl"
    elif [ -n "${MINGW64_VSN}" ]; then
	 build_cross_gcc "mingw64-full"
    elif [ -n "${NEWLIB_VSN}" ]; then
	: nothing to do
    fi
}

build_cross_binutils() {
    local ENABLE_TARGETS
    local ENABLE_OBSOLETE
    local DISABLE_WERROR
    local SOURCE_PATH
    if [ -x "${CROSS_DIR}/bin/${TARGET_TRIPLE}-as" ]; then
	return
    fi
    log "building cross-binutils ${BINUTILS_VSN}"
    SOURCE_PATH=`unpack_source "binutils-" "${BINUTILS_VSN}"`
    ENABLE_TARGETS=
    case "${TARGET_ARCH}" in
	"mingw64")
	    ENABLE_TARGETS="--enable-targets=x86_64-w64-mingw32,i686-w64-mingw32"
	    ;;
	"ubicom32")
	    touch ${SOURCE_PATH}/gcc/DEV-PHASE
	    ;;
    esac
    ENABLE_OBSOLETE=
    if [ -n "${BINUTILS_WANTS_ENABLE_OBSOLETE}" ]; then
	ENABLE_OBSOLETE="--enable-obsolete"
    fi
    DISABLE_WERROR=
    if [ -n "${BINUTILS_WANTS_DISABLE_WERROR}" ]; then
	DISABLE_WERROR="--disable-werror"
    fi
    rm -rf objdir-binutils
    mkdir objdir-binutils
    cd objdir-binutils
    ${SOURCE_PATH}/configure \
		--target="${TARGET_TRIPLE}" ${ENABLE_TARGETS} ${ENABLE_OBSOLETE} ${DISABLE_WERROR} \
		--build="${BUILD_TRIPLE}" \
		--prefix="${CROSS_DIR}" \
		--with-sysroot="${CROSS_DIR}" \
		--with-gmp="${HOST_TOOLS_DIR}/gmp-${GMP_VSN}" \
		--with-mpfr="${HOST_TOOLS_DIR}/mpfr-${MPFR_VSN}" \
		--with-mpc="${HOST_TOOLS_DIR}/mpc-${MPC_VSN}" \
		--disable-cgen \
		--disable-dejagnu \
		--disable-elf2flt \
		--disable-gcc \
		--disable-gdb \
		--disable-gold \
		--disable-itcl \
		--disable-libdecnumber \
		--disable-libgui \
		--disable-newlib \
		--disable-nls \
		--disable-plugins \
		--disable-rda \
		--disable-readline \
		--disable-sid \
		--disable-sim \
		--disable-tcl \
		--disable-tk \
		--disable-utils \
		--disable-winsup
    make ${DASHJ} MAKEINFO=/bin/true
    make MAKEINFO=/bin/true install
    cd ..
    rm -rf objdir-binutils
}

build_linux_headers() {
    local KERNEL_ARCH
    local SOURCE_PATH
    local CROSS_COMPILE="${TARGET_TRIPLE}-"
    if [ -f "${CROSS_DIR}/usr/include/linux/version.h" ]; then
	return
    fi
    log "building linux-headers ${LINUX_VSN}"
    case "${TARGET_ARCH}" in
	"aarch64") KERNEL_ARCH="arm64";;
	"armv7l") KERNEL_ARCH="arm";;
	"bfin") KERNEL_ARCH="blackfin";;
	"hppa") KERNEL_ARCH="parisc";;
	"loongarch64") KERNEL_ARCH="loongarch";;
	"mips64") KERNEL_ARCH="mips";;
	ppc64*) KERNEL_ARCH="powerpc";;
	"riscv64") KERNEL_ARCH="riscv";;
	"s390x") KERNEL_ARCH="s390";;
	"sh4") KERNEL_ARCH="sh";;
	"sparc64") KERNEL_ARCH="sparc";;
	"x86_64") KERNEL_ARCH="x86";;
	*) KERNEL_ARCH="${TARGET_ARCH}"
    esac
    SOURCE_PATH=`unpack_source "linux-" "${LINUX_VSN}"`
    case "${TARGET_ARCH}" in
	"v850")
	    # fix glibc conflict in 2.6.26, upstream d15bd1067b1fcb2b7250d22bc0c7c7fea0b759f7
	    sed -i -e 's,getline(,get_line(,g' "${SOURCE_PATH}/scripts/unifdef.c"
	    ;;
    esac
    cd "${SOURCE_PATH}"
    make ARCH="${KERNEL_ARCH}" CROSS_COMPILE="${CROSS_COMPILE}" INSTALL_HDR_PATH="${CROSS_DIR}/usr" headers_install
    case "${TARGET_ARCH}" in
	"v850")
	    # install additional headers needed by uClibc-ng
	    cp include/asm-v850/{clinkage,macrology,asm}.h "${CROSS_DIR}/usr/include/asm/"
	    ;;
    esac
    make mrproper
    cd -
}

build_mingw64_headers() {
    if [ -f "${CROSS_DIR}/${TARGET_TRIPLE}/include/windows.h" ]; then
	return
    fi
    log "building mingw-w64-headers ${MINGW64_VSN}"
    unpack_tarball "mingw-w64-v${MINGW64_VSN}"
    rm -rf objdir-headers
    mkdir objdir-headers
    cd objdir-headers
    ${SOURCES_DIR}/mingw-w64-v${MINGW64_VSN}/mingw-w64-headers/configure \
		--prefix="${CROSS_DIR}/${TARGET_TRIPLE}" \
		--host="${TARGET_TRIPLE}"
    ln -sf "${TARGET_TRIPLE}" "${CROSS_DIR}/mingw"
    make install
    cd ..
    rm -rf objdir-headers
}

build_glibc() {
    local SOURCE_PATH="$1"
    local TARGET_TRIPLE="$2"
    local TARGET_CC="$3"
    local DISABLE_WERROR
    log "building glibc-${GLIBC_VSN} for ${TARGET_TRIPLE} ${TARGET_CC}"
    DISABLE_WERROR=
    if [ -n "${GLIBC_WANTS_DISABLE_WERROR}" ]; then
	DISABLE_WERROR="--disable-werror"
    fi
    rm -rf "${TARGET_TRIPLE}"
    mkdir "${TARGET_TRIPLE}"
    cd "${TARGET_TRIPLE}"
    ${SOURCE_PATH}/configure "${TARGET_CC}" ${DISABLE_WERROR} \
		CXX=/bin/false \
		--host="${TARGET_TRIPLE}" \
		--build="${BUILD_TRIPLE}" \
		--prefix=/usr \
		--without-cvs \
		--disable-profile
    make ${DASHJ}
    make DESTDIR="${CROSS_DIR}" install
    cd ..
    rm -rf "${TARGET_TRIPLE}"
}

build_target_glibc() {
    local TARGET_CC
    local SOURCE_PATH
    SOURCE_PATH=`unpack_source "glibc-" "${GLIBC_VSN}"`
    rm -rf objdir-glibc
    mkdir objdir-glibc
    cd objdir-glibc
    # build extra glibcs for alternative ABIs like -m32
    case "${TARGET_ARCH}" in
	"mips64")
	    build_glibc "${SOURCE_PATH}" "mips-unknown-linux-gnu" "CC=mips64-unknown-linux-gnu-gcc -mabi=32"
	    build_glibc "${SOURCE_PATH}" "mips-unknown-linux-gnu" "CC=mips64-unknown-linux-gnu-gcc -mabi=n32"
	    TARGET_CC="CC=mips64-unknown-linux-gnu-gcc -mabi=64"
	    ;;
	"nds32")
	    # -fcommon is needed to build nds32's glibc-2.27 with gcc >= 10
	    TARGET_CC="CC=nds32le-unknown-linux-gnu-gcc -fcommon"
	    ;;
	"ppc64")
	    build_glibc "${SOURCE_PATH}" "ppc-unknown-linux-gnu" "CC=ppc64-unknown-linux-gnu-gcc -m32"
	    ;;
	"s390x")
	    build_glibc "${SOURCE_PATH}" "s390-unknown-linux-gnu" "CC=s390x-unknown-linux-gnu-gcc -m31"
	    ;;
	"sparc64")
	    build_glibc "${SOURCE_PATH}" "sparcv9-unknown-linux-gnu" "CC=sparc64-unknown-linux-gnu-gcc -m32 -mcpu=ultrasparc"
	    ;;
	"x86_64")
	    build_glibc "${SOURCE_PATH}" "i686-unknown-linux-gnu" "CC=x86_64-unknown-linux-gnu-gcc -m32"
	    build_glibc "${SOURCE_PATH}" "x86_64-unknown-linux-gnu" "CC=x86_64-unknown-linux-gnu-gcc -mx32"
	    ;;
    esac
    # build main glibc
    build_glibc "${SOURCE_PATH}" "${TARGET_TRIPLE}" "${TARGET_CC}"
    cd ..
    rm -rf objdir-glibc
}

build_target_uclibc() {
    local CROSS_COMPILE="${TARGET_TRIPLE}-"
    local SOURCE_PATH
    local OLDDEFCONFIG="olddefconfig"
    log "building uClibc ${UCLIBC_VSN} for ${TARGET_TRIPLE}"
    SOURCE_PATH=`unpack_source "uClibc-ng-" "${UCLIBC_VSN}"`
    cd "${SOURCE_PATH}"
    make clean
    # the lm32 defconfig is misplaced
    if [ -f "extra/Configs/defconfigs/lm32" ]; then
	rm "extra/Configs/defconfigs/lm32"
    fi
    if [ \( ! -f "extra/Configs/defconfigs/${TARGET_ARCH}/defconfig" \) -a \( "${TARGET_ARCH}" != "ubicom32" \) ]; then
	mkdir -p "extra/Configs/defconfigs/${TARGET_ARCH}"
	echo "TARGET_${TARGET_ARCH}=y" > "extra/Configs/defconfigs/${TARGET_ARCH}/defconfig"
    fi
    make ARCH="${TARGET_ARCH}" TARGET_ARCH="${TARGET_ARCH}" CROSS_COMPILE="${CROSS_COMPILE}" defconfig
    sed -i -e s,\^KERNEL_HEADERS=.\*\$,KERNEL_HEADERS=\"${CROSS_DIR}/usr/include\",g .config
    sed -i -e s,\^RUNTIME_PREFIX=.\*\$,RUNTIME_PREFIX=\"/\",g .config
    sed -i -e s,\^DEVEL_PREFIX=.\*\$,DEVEL_PREFIX=\"/usr\",g .config
    sed -i -e s,\^CROSS_COMPILER_PREFIX=.\*\$,CROSS_COMPILER_PREFIX=\"${CROSS_COMPILE}\",g .config
    case "${TARGET_ARCH}" in
	"cris")
	    echo 'CONFIG_CRISV32=y' >> .config
	    ;;
	"ubicom32")
	    # switch from the default V3 to the MMU-capable V5
	    echo 'CONFIG_UC_UBICOM32_V3=n' >> .config
	    echo 'CONFIG_UC_UBICOM32_V5=y' >> .config
	    # needed to avoid '#error "Unknown Ubicom32 Processor"' in syscalls.h
	    echo 'UCLIBC_EXTRA_CFLAGS="-march=ubicom32v5 -DUBICOM32_ARCH_VERSION=5"' >> .config
	    # needed to avoid compile error in ldso.c
	    echo 'FORCE_SHAREABLE_TEXT_SEGMENTS=y' >> .config
	    # needed to avoid undefined reference to scalb when linking libm.so
	    echo 'UCLIBC_SUSV3_LEGACY=y' >> .config
	    # ubicom32's old uclibc doesn't understand "olddefconfig", which newer ones _require_
	    OLDDEFCONFIG="oldconfig"
	    ;;
    esac
    if [ -n "${UCLIBC_WANTS_NPTL}" ]; then
	echo 'UCLIBC_HAS_THREADS_NATIVE=y' >> .config
    elif [ -n "${UCLIBC_WANTS_LINUXTHREADS}" ]; then
	echo 'UCLIBC_HAS_LINUXTHREADS=y' >> .config
    fi
    if [ -n "${UCLIBC_WANTS_SSP}" ]; then
	echo 'UCLIBC_HAS_SSP=y' >> .config
    fi
    if [ -n "${UCLIBC_WANTS_LITTLE_ENDIAN}" ]; then
	echo 'ARCH_WANTS_BIG_ENDIAN=n' >> .config
	echo 'ARCH_WANTS_LITTLE_ENDIAN=y' >> .config
    elif [ -n "${UCLIBC_WANTS_BIG_ENDIAN}" ]; then
	echo 'ARCH_WANTS_LITTLE_ENDIAN=n' >> .config
	echo 'ARCH_WANTS_BIG_ENDIAN=y' >> .config
    fi
    make ARCH="${TARGET_ARCH}" TARGET_ARCH="${TARGET_ARCH}" CROSS_COMPILE="${CROSS_COMPILE}" ${OLDDEFCONFIG}
    make ${DASHJ}
    make PREFIX="${CROSS_DIR}" install
    cp .config "${CROSS_DIR}"
    make clean
    cd -
}

build_target_musl() {
    log "building musl-${MUSL_VSN} for ${TARGET_TRIPLE}"
    unpack_tarball "musl-${MUSL_VSN}"
    rm -rf objdir-musl
    mkdir objdir-musl
    cd objdir-musl
    ${SOURCES_DIR}/musl-${MUSL_VSN}/configure \
		--host="${TARGET_TRIPLE}" \
		--build="${BUILD_TRIPLE}" \
		--prefix=/usr \
		--disable-wrapper
    make ${DASHJ}
    make DESTDIR="${CROSS_DIR}" install
    # fix lib/ld-musl-*.so.1 -> /usr/lib/libc.so symlink
    ln -sf ../usr/lib/libc.so ${CROSS_DIR}/lib/ld-musl-*.so.*
    cd ..
    rm -rf objdir-musl
}

build_target_mingw64crt() {
    log "building mingw-w64-crt ${MINGW64_VSN}"
    unpack_tarball "mingw-w64-v${MINGW64_VSN}"
    rm -rf objdir-crt
    mkdir objdir-crt
    cd objdir-crt
    ${SOURCES_DIR}/mingw-w64-v${MINGW64_VSN}/mingw-w64-crt/configure \
		--prefix="${CROSS_DIR}/${TARGET_TRIPLE}" \
		--enable-lib32 \
		--enable-lib64 \
		--host="${TARGET_TRIPLE}"
    make ${DASHJ}
    make install
    cd ..
    rm -rf objdir-crt
}

build_target_newlib() {
    local SOURCE_PATH
    log "building newlib ${NEWLIB_VSN} for ${TARGET_TRIPLE}"
    SOURCE_PATH=`unpack_source "newlib-" "${NEWLIB_VSN}"`
    rm -rf objdir-newlib
    mkdir objdir-newlib
    cd objdir-newlib
    ${SOURCE_PATH}/configure \
		--target="${TARGET_TRIPLE}" \
		--build="${BUILD_TRIPLE}" \
		--prefix=/
    make ${DASHJ}
    make DESTDIR="${CROSS_DIR}" install
    cd ..
    rm -rf objdir-newlib
}

build_target_libc() {
    if [ -n "${GLIBC_VSN}" ]; then
	build_target_glibc
    elif [ -n "${UCLIBC_VSN}" ]; then
	 build_target_uclibc
    elif [ -n "${MUSL_VSN}" ]; then
	 build_target_musl
    elif [ -n "${MINGW64_VSN}" ]; then
	build_target_mingw64crt
    elif [ -n "${NEWLIB_VSN}" ]; then
	build_target_newlib
    fi
}

log "buildcross ${VERSION} building toolchain for ${TARGET_ARCH} in ${CROSS_DIR}"

#
# Get Sources
#

if [ ! -d "${DOWNLOADS_DIR}" ]; then
    mkdir -p "${DOWNLOADS_DIR}"
fi
if [ ! -d "${SOURCES_DIR}" ]; then
    mkdir -p "${SOURCES_DIR}"
fi

get_sources

cd ${BUILD_DIR}

#
# Build Host GCC
#

ORIG_PATH="${PATH}"

if [ -z "${SKIP_HOST_TOOLS}" ]; then

# build preliminary host libraries and gcc using system cc
build_host_gmp "-cc"
build_host_mpfr "-cc"
build_host_mpc "-cc"
build_host_gcc "-cc"

# update PATH to pick up our preliminary host gcc
export PATH="${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}-cc/bin:${ORIG_PATH}"

# build final host libraries and gcc using preliminary host gcc
build_host_gmp
build_host_mpfr
build_host_mpc
build_host_gcc

# remove preliminary host libraries and gcc
rm -rf ${HOST_TOOLS_DIR}/gmp-${GMP_VSN}-cc
rm -rf ${HOST_TOOLS_DIR}/mpfr-${MPFR_VSN}-cc
rm -rf ${HOST_TOOLS_DIR}/mpc-${MPC_VSN}-cc
rm -rf ${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}-cc

# update PATH to pick up our final host gcc
export PATH="${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}/bin:${ORIG_PATH}"

fi # SKIP_HOST_TOOLS

# determine BUILD_TRIPLE, ensure it differs from TARGET_TRIPLE
if [ -z "${BUILD_TRIPLE}" ]; then
    BUILD_TRIPLE=`gcc -v 2>&1 | grep '^Target:' | awk '{print $2}'`
else
    echo using BUILD_TRIPLE "${BUILD_TRIPLE}"
fi
if [ -z "${BUILD_TRIPLE}" ]; then
    echo unable to determine build triple
    exit 1
fi
if [ "${BUILD_TRIPLE}" = "${TARGET_TRIPLE}" ]; then
    echo build triple "${BUILD_TRIPLE}" equals target triple
    exit 1
fi

#
# Build Cross Tools and Libc
#

# build cross binutils
build_cross_binutils

# update PATH to pick up our cross tools
export PATH="${CROSS_DIR}/bin:${HOST_TOOLS_DIR}/gcc-${HOST_GCC_VSN}/bin:${ORIG_PATH}"

# mingw-w64 needs headers early on
[ -n "${MINGW64_VSN}" ] && build_mingw64_headers

# build preliminary cross gcc without target libc
build_cross_gcc_without_libc

# build target kernel headers
[ -n "${LINUX_VSN}" ] && build_linux_headers

# build target libc
build_target_libc

# build final cross gcc with target libc
build_cross_gcc_with_libc

log "done"
